@model resourceEdge.Domain.Entities.LeaveRequestViewModel

@{
    ViewBag.Title = "RequestLeave";
    Layout = "~/Views/Shared/Employeelayout.cshtml";
    double allLeave;
    var leave = ViewBag.AvailableLeave;
    if (leave != null)
    {
        allLeave = leave;
    }else
    {
        leave = 0;
    }
}
@section css{
    <link href="~/assets/global/plugins/bootstrap-daterangepicker/daterangepicker.min.css" rel="stylesheet" type="text/css" />
    <link href="~/assets/global/plugins/bootstrap-datepicker/css/bootstrap-datepicker3.min.css" rel="stylesheet" type="text/css" />

    }
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

       @Html.Hidden("UserId", (string) ViewBag.userId)
        <div class="hidden" id="userIdDiv" name ="UserId">@ViewBag.userId</div>

        <div class="form-group">
            @Html.LabelFor(model => model.AvailableLeave, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input class="form-control text-box single-line" id="AvailableLeave" name="AvailableLeave" readonly="readonly" type="text" value="Getting Available Leaves please wait">
                <span class="field-validation-valid text-danger" data-valmsg-for="AvailableLeave" data-valmsg-replace="true"></span>
                @Html.ValidationMessageFor(model => model.AvailableLeave, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Reason, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Reason, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Reason, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LeavetypeId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.LeavetypeId, (SelectList)ViewBag.leaveType, "Select Leave Type", htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.LeavetypeId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label for="FromDate" class="col-md-2">Leave Interval</label>
            <div class="input-group input-large date-picker input-daterange col-md-10" data-date="10/11/2012" data-date-format="mm/dd/yyyy">
                <span class="input-group-addon"> From </span>
                <input type="text" class="form-control" name="FromDate" id="FromDate">
                <span class="input-group-addon"> To </span>
                <input type="text" class="form-control" name="ToDate" id="ToDate">
                <span class="field-validation-valid text-danger" data-valmsg-for="FromDate" data-valmsg-replace="true"></span>
                <span class="field-validation-valid text-danger" data-valmsg-for="ToDate" data-valmsg-replace="true"></span>
                <span id="Date_error_message" class="hide" style="color:red"></span>

            </div>
        </div>

        @*<div class="form-group">
            @Html.LabelFor(model => model.FromDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FromDate, new { htmlAttributes = new { @class = "form-control" } })

                @Html.ValidationMessageFor(model => model.FromDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ToDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ToDate, new { htmlAttributes = new { @class = "form-control datepicker" } })
                @Html.ValidationMessageFor(model => model.ToDate, "", new { @class = "text-danger" })
                <span id="Date_error_message" class="hide" style="color:red"></span>
            </div>
        </div>*@

        <div class="form-group">
            @Html.LabelFor(model => model.RepmangId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select class="form-control" id="RepmangId" name="RepmangId"></select>
                @Html.ValidationMessageFor(model => model.RepmangId, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.Label("Total Request Days", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.requestDays, new { htmlAttributes = new { @readonly = "readonly", @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LeaveNoOfDays, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.LeaveNoOfDays, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.LeaveNoOfDays, new { htmlAttributes = new { @readonly = "readonly", @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LeaveNoOfDays, "", new { @class = "text-danger" })
            </div>
        </div>

 

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input id="btnSubmit" type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Plugins{
<script src="~/assets/global/plugins/moment.min.js" type="text/javascript"></script>
    <script src="~/assets/global/plugins/bootstrap-daterangepicker/daterangepicker.min.js" type="text/javascript"></script>
<script src="~/assets/global/plugins/bootstrap-datepicker/js/bootstrap-datepicker.min.js" type="text/javascript"></script>

    }

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
<script src="~/assets/pages/scripts/components-date-time-pickers.min.js" type="text/javascript"></script>

    <script>
        window.onload = function () {
          //  var id = $('#userIdDiv')[0].innerHTML;
            GetRmByUserId("@ViewBag.userId");
            GetempLeaveAmount("@ViewBag.userId");
        };
        document.onload = function () {

        }
        function GetempLeaveAmount(userId) {
            console.log("Method entered");
            $.ajax({
                type: 'GET',
                url: 'http://localhost:58124/api/settings/GetempLeaveAmount/' + userId,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (data) {
                    console.log('in the GetempLeaveAmount method');
                    console.log(data);
                    if (data.length != 0) {
                        $('#AvailableLeave').html(data.EmpLeaveLimit);
                        $('#AvailableLeave').val(data.EmpLeaveLimit);
                        return data;
                        
                    } else {
                        $('#AvailableLeave').html("please configure Employee leave")
                        $('#AvailableLeave').val("Please configure Employee leave");
                        //write the jquery to check agaist JQHxr
                    }
                },
                failure: function () {
                    var message = {
                        message: "Failed to load data... Try again later"
                    };
                    $('#AvailableLeave').val('No Leave found');
                }
            })
        };

        function GetempLeaveType(id) {
            console.log("Method entered");
            $.ajax({
                type: 'GET',
                url: 'http://localhost:58124/api/Settings/GetempLeaveTypeAmount/' + id,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (data) {
                    console.log('in the GetempLeaveAmount method');
                    console.log(data);
                    if (data != '') {

                        $('#LeaveNoOfDays').html(data.numberofdays);
                        $('#LeaveNoOfDays').val(data.numberofdays);
                        return data;

                    } else {
                        $('#LeaveNoOfDays').html("please configure Leave Types")
                    }
                },
                failure: function () {
                    var message = {
                        message: "Failed to load data... Try again later"
                    };
                    $('#LeaveNoOfDays').html('No Leave found');
                }
            })
        };
        $('#LeavetypeId').bind('change', function () {
            GetempLeaveType($(this).val());
        });


  function dateDifference(start, end) {

            // Copy date objects so don't modify originals
            var Date1 = new Date(start);
            var Date2 = new Date(end);


            // Set time to midday to avoid dalight saving and browser quirks
            Date1.setHours(12, 0, 0, 0);
            Date2.setHours(12, 0, 0, 0);

            // Get the difference in whole days
            var totalDays = Math.round((Date2 - Date1) / 8.64e7);

            // Get the difference in whole weeks
            var wholeWeeks = totalDays / 7 | 0;

            // Estimate business days as number of whole weeks * 5
            var days = wholeWeeks * 5;

            // If not even number of weeks, calc remaining weekend days
            if (totalDays % 7) {
                Date1.setDate(Date1.getDate() + wholeWeeks * 7);

                while (Date1 < Date2) {
                    Date1.setDate(Date1.getDate() + 1);

                    // If day isn't a Sunday or Saturday, add to business days
                    if (Date1.getDay() != 0 && Date1.getDay() != 6) {

                        ++days;
                    }
                }
            }
            return days;
        }

        $("#ToDate").change(function () {
            var result = dateDifference($('#FromDate').val(), $('#ToDate').val());
            $()
            console.log("Result is: " + result)
            checkTimeAgainstDate(result);
            ValidateTotalRequestDay($('#requestDays').val());
        });
        $('#FromDate').change(function () {
            var result = dateDifference($('#FromDate').val(), $('#ToDate').val());
            checkTimeAgainstDate(result);
            ValidateTotalRequestDay($('#requestDays').val());
        })




        //function CalculateDateDifference() {
        //    var FromDate = $('#FromDate').val();
        //    var ToDate = $('#ToDate').val();
        //    var date1 = new Date(FromDate);
        //    var Date2 = new Date(ToDate);
        //    var diff = 0;
        //    var days = 8.64e7;
        //    diff = Date2 - date1;

        //    console.log("Diff Date  " + new Date(diff));
        //    //var dd = new Date(mdy[0], mdy[1]-1, mdy[2])
        //    //var dd = new Date(mdy[0], mdy[1]-1, mdy[2])
        //    var finalResult = null;
        //    var result = Math.floor(diff / days)
        //    switch (true) {
        //        case (result > 7 && result < 14):
        //            finalResult = result - 2
        //            console.log("only one week end");
        //            break;
        //        case (result >= 14 && result < 21):
        //            finalResult = result - 4
        //            console.log("only Two week end");
        //            break;
        //        case (result >= 21 && result < 28):
        //            console.log("only Three week end");
        //            finalResult = result - 6
        //            break;
        //        case (result >= 28 && result <= 31):
        //            finalResult = result - 8
        //            console.log("only Four week end");
        //            break;
        //        default:
        //            finalResult = result - 0;
        //            console.log("hitting default");
        //    }
        //    checkTimeAgainstDate(finalResult + "is finalResult");
        //    console.log("the differnce in days is " + finalResult);
        //}
        //$("#ToDate").change(function (event) {
        //    CalculateDateDifference(event, $("#ToDate"));
        //});
        $('#requestDays').on('change', function () {
           console.log($(this).val());
            ValidateTotalRequestDay(this)
        })

        function ValidateTotalRequestDay(days) {
            console.log("in the validateTotalRequest");
            if (days < 0) {

            }
            if (days == 0) {
                $('#btnSubmit').prop('disabled', true);
            }
            if (days >0) {
                $('#btnSubmit').prop('disabled', false);
            }
        }

        function checkTimeAgainstDate(daysPicked) {
            var Date_error_message = false;
            var realNoofDays = $('#LeaveNoOfDays').val();
            console.log(daysPicked + "is days picked");
            if (daysPicked <= Number(realNoofDays)) {
                Date_error_message = false;
                console.log("in the else method");
                $('#Date_error_message').removeClass("show")
                $('#btnSubmit').prop('disabled', false);
                $('#requestDays').val(daysPicked);

            } else {

                $('#Date_error_message').html("The Days exceeds the alloted date for the specified leave");
                $('#Date_error_message').addClass("show");
                $('#btnSubmit').prop('disabled', true);
                Date_error_message = true;
                console.log('got here');
            }

        }



        function GetRmByUserId(id) {
            console.log("GetRmByUserId Method entered");
            $.ajax({
                type: 'GET',
                url: 'http://localhost:58124/api/Settings/GetRmByUserId/' + id,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (data) {
                    console.log('in the GetRmByUserId method');
                    console.log(data);
                    if (data != '') {
                        $('#RepmangId').append('<option value="">' + '--Select Employee--' + '</option>');
                        $.each(data, function (index, data) {
                            $('#RepmangId').append('<option value="' + data.userId + '">' + data.FullName + '</option>');
                        })
                    } else {

                        $('#RepmangId').append('<option value="">' + 'No Reporting Manager For you yet' + '</option>')
                    }
                },
                failure: function () {
                    var message = {
                        message: "Failed to load data... Try again later"
                    };
                    $('#RepmangId').append('<option value="">' + message.message + '</option>')
                }
            })
        };
    </script>
}
@*<script src="~/Scripts/jquery-3.2.1.js"></script>*@


